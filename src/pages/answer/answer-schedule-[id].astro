---
import Layout from '../../layouts/Layout.astro';
const { id } = Astro.params;
---

<Layout title="日程回答ページ">
  <main id="id-transfer" data-message={id}>
    <h1>日程回答ページ</h1>
    <p>ID: {id}</p>
    <!-- <p>日程回答部分</p> -->
    <div style="margin: auto;text-align: left;" >
      <h3>イベント名</h3>
      <div id="event_name"></div>
      <hr>
      <h3>イベント詳細説明</h3>
      <div id="event_detail"></div>
      <hr>
      <h3>日にち候補</h3>
      <h5>※各自の出欠状況を変更するには名前のリンクをクリックしてください。</h5>
      <div id="date_list_container"></div>
      <p>出欠を入力する</p>
      <hr>
      <label>名前</label><br/>
      <label>絵文字は使用出来ません</label><br/>
      <input type="text" id="username" style="width:500px;height:30px"><br/>
      <label>日にち候補</label><br/>
      <div id="date_option_container" style="text-align: center;"></div>
      <label>コメント</label><br/>
      <input type="text" id="comment" style="width:500px;height:30px">
      <p style="text-align: center;">
        <button id="answerButton" style="width:100px;height:30px">回答</button>
      </p>
    </div>
  </main>
</Layout>


<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    background-color: white;
    color: black;
    font-size: 20px;
    line-height: 1.6;
  }
  h1 {
    font-size: 2rem;
    font-weight: bold;
    margin-bottom: 1em;
  }
</style>


<script>
  const id = document.getElementById("id-transfer").getAttribute("data-message");

  document.getElementById('answerButton').addEventListener('click', () => {
    const eventId = "{id}";


      createMember();
      
  });


    // 画面初期表示
  window.onload = async function(){
    // イベントNoを取得する
    const event_no =  id

    // EVENT_DATE_INFO(日程情報)の取得
    const getEventDateInfoResponse = await fetch('/api/geteventdateinfo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              event_no: event_no
            })
    });

    const EventDateInfo = await getEventDateInfoResponse.json();


    // EVENT_INFO(イベント情報)の取得
    const geteventinfo = await fetch('/api/geteventinfo',{
      method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              event_no: event_no
            })
    });

    const EventInfo = await geteventinfo.json();

    // console.log(EventInfo);

        // >>>>>>>>>>>>>>>>> ATTEND_MEMBER_INFO (日程参加者の情報)の取得
    const getattendmemberinfo = await fetch ('/api/getattendmemberinfo',{
      method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              event_no: event_no
            })
    });

    const AttendMemberInfo = await getattendmemberinfo.json();


    let event_name = document.getElementById("event_name");
    event_name.innerText = EventInfo[0]["event_name"];

    let event_detail = document.getElementById("event_detail");
    event_detail.innerText = EventInfo[0]["event_memo"];


    //-------------------------


    //日にち候補の生成
    let date_option_container = document.getElementById("date_option_container");

    let i = 0;

    EventDateInfo.forEach(function(record){
        // console.log(record);
        // console.log(record["schedule_name"]);

        let para = document.createElement("p");
        let span = document.createElement("span");
        span.style.width = "300px";
        span.style.display= "inline-block";
        let node = document.createTextNode(record["schedule_name"]);

        let pulldownList = document.createElement("select");
        pulldownList.style.width = "40px";
        pulldownList.style.height = "25px";
        pulldownList.setAttribute("id", "select-id-"+i.toString());

        let apply_option = document.createElement("option");
        apply_option.setAttribute("value", "0");
        apply_option.text="○";
        let unkown_option = document.createElement("option");
        unkown_option.setAttribute("value", "1");
        unkown_option.text= "△";
        let deny_option = document.createElement("option");
        deny_option.setAttribute("value", "2");
        deny_option.text = "×";

        span.appendChild(node);

        pulldownList.add(apply_option);
        pulldownList.appendChild(unkown_option);
        pulldownList.appendChild(deny_option);


        para.appendChild(span);       
        para.appendChild(pulldownList);

        date_option_container.appendChild(para);

        i++;
    });

    // 日にち候補一覧の作成
    createTable(EventDateInfo,AttendMemberInfo);


  };

  // 日にち候補一覧の作成
  function createTable(EventDateInfo,AttendMemberInfo){

    let date_list_container = document.getElementById("date_list_container");

    let table = '<table border=1 width="500">';

    let title = '<tr><td>日程</td><td>○</td><td>△</td><td>×</td></tr>'
      
    table += title;

    for(let i=0; i < EventDateInfo.length; i++){
        table += '<tr>';
        for(let j = 0; j< 4; j++ ){
          if(j == 0){
            table += "<td>" + EventDateInfo[i]["schedule_name"]+ "</td>";
          }

          if(j == 1){
            table += "<td>" + getScheduleJoinInfo(EventDateInfo[i]["schedule_id"],'0',AttendMemberInfo).length + "</td>";
          }

          if(j == 2){
            table += "<td>" + getScheduleJoinInfo(EventDateInfo[i]["schedule_id"],'1',AttendMemberInfo).length + "</td>";
          }

          if(j == 3){
            table += "<td>" + getScheduleJoinInfo(EventDateInfo[i]["schedule_id"],'2',AttendMemberInfo).length + "</td>";
          }
        }
    }

    let command = '<tr><td>コメント</td><td></td><td></td><td></td></tr>'

    table += command;

    table += '</table>';
    date_list_container.innerHTML = table;

  }

  // 各日程の参加者取得
  function getScheduleJoinInfo(filterObj1 ,filterObj2 , Obj){

    return Obj.filter(item => item.schedule_id == filterObj1 && item.member_attendance == filterObj2)

  }


  async function createMember(){

    const memberName = (document.getElementById("username") as HTMLInputElement).value;
    const event_no = id;
    const commandText = (document.getElementById("comment") as HTMLInputElement).value;

    // console.log(memberName);
    // console.log(eventID);
    // console.log(commandText);

    // 参加者情報(EVENT_MEMBER)へ メンバー情報を登録する
    const addeventmemberReslut = await insertIntoEventMember(memberName,event_no,commandText);
    const member_id = addeventmemberReslut[0]["member_id"].toString();

    let insertDatas= [];
    let i = 0;

    let mydate = new Date();
    let today = mydate.toLocaleDateString();

    while(document.getElementById("select-id-" + i)){

      let ele = (document.getElementById("select-id-" + i) as HTMLInputElement).value;

      let data = {};
      data["member_id"] = member_id;
      data["schedule_id"] = i.toString();
      data["member_attendance"] = ele;
      data["attendance_info_update_time"] = today;    
      data["event_no"] = id;
      insertDatas.push(data);
      i++;
    }

    // console.log(JSON.stringify(insertDatas));

    // 参加者情報(EVENT_MEMBER)へ メンバー情報を登録する
    const attendmemberinfoReslut = await insertIntoAttendMemberInfo(insertDatas);

    console.log(await attendmemberinfoReslut);

    pageSwitch();
  }

  async function pageSwitch(){
    window.location.href = `/answer/show-schedule-result-${id}`;
  }

  // 参加者情報(EVENT_MEMBER)へ メンバー情報を登録する
  async function insertIntoEventMember(memberName,event_no,commandText){

    const addeventmemberResponse = await fetch('/api/addeventmember', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              member_name: memberName,
              event_no:event_no,
              comment:commandText
            })
    });

    return await addeventmemberResponse.json();
  }

  // 日程参加者の情報(ATTEND_MEMBER_INFO)へ メンバーの出欠状況を登録する
  async function insertIntoAttendMemberInfo(insertDatas){

    const addattendmemberinfoResponse = await fetch('/api/addattendmemberinfo',{
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(
                insertDatas
            )
    });

    return await addattendmemberinfoResponse.json();

  }


</script>
