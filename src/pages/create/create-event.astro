---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Create an Event">
    <h2 class="title">調整くん</h2>
    <form id="eventForm" class="form">
        <div class="step1">
            <div class="step-title">
                <label for="eventName">Step1)イベント名</label>
                <br>
                <span>※忘年会、打ち合わせなど</span>
                <input type="text" id="eventName" name="eventName" placeholder="ソフトウェア開発部お花見" required />
            </div>
            <div>
                <label for="eventMemo">メモ（任意）</label>
                <br>
                <span>※飲み会の日程調整をしましょう！</span>
                <textarea rows="10" cols="25" id="eventMemo" name="eventMemo" placeholder="ソフトウェア開発部でお花見をしましょう♩" required></textarea>
            </div>
        </div>

        <div class="step2">
            <div class="step-title">
                <label for="eventDates">Step2)日程候補</label>
                <br>
                <span>※候補日程/日時を入力してください</span>
                <br>
                <span>候補の区切りは改行で判断されます。</span>
            </div>
            <input type="date" id="eventDates" name="eventDates" />
            <textarea id="selectedDates" rows="5" cols="25" placeholder="追加された日程がここに表示されます"></textarea>
        </div>

        <button type="submit">イベント作成</button>
    </form>
</Layout>

<style>
    /* datepickerを常に表示する */
    #eventDates {
        display: block;
    }
</style>

<script type="module">
    const eventForm = document.getElementById('eventForm');
    const dateInput = document.getElementById('eventDates');
    const selectedDates = document.getElementById('selectedDates');

    dateInput.addEventListener('change', () => {
        if (dateInput.value) {
            const dateValue = `${dateInput.value}\n`;
            selectedDates.value += dateValue;
            dateInput.value = ''; // Clear the input after adding
        }
    });

    eventForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(event.target);
        const eventName = formData.get('eventName');
        const eventMemo = formData.get('eventMemo');
        const eventDates = selectedDates.value.trim().split('\n');

        const eventCreateTime = new Date().toISOString();

        const createResponse = await fetch('/api/createevent', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                event_name: eventName,
                event_memo: eventMemo,
                event_create_time: eventCreateTime,
            })
        });

        const createData = await createResponse.json();

        if (createResponse.ok) {
            const eventNo = createData[0].event_no;
            const dateResponse = await fetch(`/api/addeventdates/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    event_no: eventNo,
                    event_dates: eventDates,
                })
            });

            if (dateResponse.ok) {
                window.location.href = `/create/show-event-url-${eventNo}`;
            } else {
                console.error('Error adding event dates:', await dateResponse.json());
            }
        } else {
            console.error('Error creating event:', createData.error);
        }
    });
</script>
